#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""


Dojotools - tools for your coding dojo session

Copyright (C) 2009 Fl√°vio Amieiro <amieiro.flavio@gmail.com>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 dated June, 1991.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Library General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see <http://www.gnu.org/licenses/>.

If you find any bugs or have any suggestions email: amieiro.flavio@gmail.com
"""

import os
import sys
import lang
from optparse import OptionParser
from ui import UserInterface
import imp
imp.load_source("generator", "dojotools-gen")
from generator import generate
from tools import DojoPlayer, RunThread, Timer, Monitor, set_execute_config




def parse_options():
    usage = "%prog [OPTIONS] COMMAND ..."
    description = lang.DESCRIPTION
    parser = OptionParser(usage, description=description)
    parser.add_option(
        '-c',
        '--commit',
        action='store_true',
        dest = 'commit',
        help = lang.GIT_HELP,
        default = False,
    )
    
    parser.add_option(
        '-d',
        '--directory',
        action = 'store',
        type = 'string',
        dest = 'directory',
        help = lang.DIRECTORY_HELP,
        metavar = 'DIRECTORY',
        default = os.path.abspath(os.path.curdir)
    )

    parser.add_option(
        '-p',
        '--patterns_file',
        action = 'store',
        type = 'string',
        dest = 'patterns_file',
        help = lang.PATTERNS_HELP,
        metavar = 'PATTERNS_FILE',
        default = None,
    )

    parser.add_option(
        '-t',
        '--time',
        action = 'store',
        type = 'int',
        dest = 'round_time',
        help = lang.TIME_HELP,
        default = 300
    )

    parser.add_option(
        '-a',
        '--arduino',
        action = 'store_true',
        dest = 'arduino',
        help = lang.ARDUINO_HELP,
        default = False,
    )
    
    parser.add_option(
        '-m',
        '--multithread',
        action = 'store_true',
        dest = 'use_thread',
        help = lang.MULTITHREAD_HELP,
        default = False,
    )
    
    parser.add_option(
        '-b',
        '--before',
        action = 'store',
        type = 'string',
        dest = 'before_command',
        help = lang.BEFORE_HELP,
        default = ""
    )

    parser.add_option(
        '-u',
        '--unstoppable',
        action = 'store_true',
        dest = 'unstoppable',
        help = lang.UNSTOPPABLE_HELP,
        default = False
    )

    parser.add_option(
        '-g',
        '--generate',
        action = 'store',
        type = 'string',
        dest = 'generate',
        help = lang.GENERATE_HELP,
        default = ""
    )
    
    parser.add_option(
        '-w',
        '--who',
        action = 'store_true',
        dest = 'who',
        help = lang.WHO_HELP,
        default = False
    )
    
    return parser.parse_args()


if __name__ == '__main__':

    options, args = parse_options()

    try:        
        options.directory = generate(
            options.generate, 
            options.directory, 
            lang.GENERATOR_MESSAGES
        )

        if options.patterns_file == None:
            options.patterns_file = os.path.join(
                options.directory,
                '.dojoignore'
            )

        run_dojo_path = os.path.join(os.path.abspath(options.directory), 'run.dojo')
        if not args:
            if os.path.exists(run_dojo_path):
                args = ["sh run.dojo"]
            else:
                print lang.RUN_FILE_WARNING          
                
        print lang.MONITORING % options.directory
        print lang.IGNORING % (options.patterns_file)
        print lang.QUIT        
                
        set_execute_config(
            directory = options.directory,
            arduino = options.arduino
        )
                
        player = DojoPlayer(options.who, can_commit=options.commit)     
                  


        timer = Timer(options.round_time)
        ui = UserInterface(
            timer, 
            options.use_thread, 
            options.unstoppable, 
            player,
        )
        
       
        
        monitor = Monitor(
            ui = ui,
            directory = options.directory,
            commands = args,
            patterns_file = options.patterns_file,
            player = player,
            use_thread = options.use_thread,
            before = options.before_command,
        )
        
        ui.init()


    except KeyboardInterrupt:
        print lang.LEAVING
        if options.use_thread:
            ui.thread.stop()
        player.special_commit()
        sys.exit(0)
